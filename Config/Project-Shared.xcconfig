//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 6/15/17
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Objective-C Automatic Reference Counting
// 
// Compiles reference-counted Objective-C code (when garbage collection is not enabled)
// to use Automatic Reference Counting.
// Code compiled using automated reference counting is compatible with other code (e.g.,
// frameworks) compiled using either
// manual reference counting (i.e., traditional "retain" and "release" messages) or
// automated reference counting.  Using this mode is currently
// incompatible with compiling code to use Objective-C Garbage Collection.

CLANG_ENABLE_OBJC_ARC = YES



// Combine High Resolution Artwork
// 
// Combines image files at different resolutions into one multi-page TIFF file that is
// HiDPI compliant for macOS 10.7 and later. Only image files in the same directory and
// with the same base name and extension are combined. The file names must conform to the
// naming convention used in HiDPI.

COMBINE_HIDPI_IMAGES = YES



// Dynamic Library Install Name Base
// 
// Sets the base value for the internal "install path" (LC_ID_DYLIB) in a dynamic
// library. This will be combined with the EXECUTABLE_PATH to form the full install path.
// Setting LD_DYLIB_INSTALL_NAME directly will override this setting. This setting
// defaults to the target's INSTALL_PATH. It is ignored when building any product other
// than a dynamic library.

DYLIB_INSTALL_NAME_BASE = @rpath



// macOS Deployment Target
// 
// Code will load on this and later versions of macOS.  Framework APIs that are
// unavailable in earlier versions will be weak-linked; your code should check for null
// function pointers or specific system versions before calling newer APIs.

MACOSX_DEPLOYMENT_TARGET = 10.10



// Other Linker Flags
// 
// Options defined in this setting are passed to invocations of the linker.

OTHER_LDFLAGS = -framework XCTest



OTHER_SWIFT_FLAGS = -DSWIFT_VERSION=4.0 -DXcode



// Product Name
// 
// This is the basename of the product generated by the target.

PRODUCT_NAME = $(TARGET_NAME)



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the ADDITIONAL_SDKS
// setting.

SDKROOT = macosx



// Supported Platforms
// 
// The list of supported platforms from which a base SDK can be used. This setting is
// used if the product can be built for multiple platforms using different SDKs.

SUPPORTED_PLATFORMS = macosx iphoneos iphonesimulator appletvos appletvsimulator watchos watchsimulator



SWIFT_ACTIVE_COMPILATION_CONDITIONS = SWIFT_PACKAGE



SWIFT_VERSION = 3.0



// Use Header Maps
// 
// Enable the use of "Header Maps", which provide the compiler with a mapping from
// textual header names to their locations, bypassing the normal compiler header search
// path mechanisms.  This allows source code to include headers from various locations in
// the file system without needing to update the header search path build settings.

USE_HEADERMAP = NO