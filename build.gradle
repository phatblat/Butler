/**
 * build.gradle
 * Butler
 */

buildscript {
    repositories {
        maven { url('http://repository.openbakery.org/') }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.openbakery', name: 'xcode-plugin', version: '+'
    }
}

ext {
    if (project.hasProperty('verbose')) {
        verbose = project.verbose.toBoolean()
    } else {
        verbose = false
    }

    xcodePath = 'env DEVELOPER_DIR=/Applications/Xcode-9.app '
}

if (System.env.JENKINS_URL) {
    println "Running on jenkins"
    ext.verbose = true
}

/* xcodePlugin */

apply plugin: 'org.openbakery.xcode-plugin'

xcodebuild {
    version = '9'
    type = 'macOS'
    scheme = 'Butler'
    target = 'Butler'
    // https://github.com/openbakery/gradle-xcodePlugin/issues/361
    bundleName = 'Butler'
}

task xcodeVersion(type: Exec) {
    String command =  xcodePath + 'xcodebuild -version'
    commandLine command.tokenize()
}

/* Bundler */

task bundleInstall(type: Exec) {
    String command = 'bundle install'
    if (!verbose) {
        command += ' --quiet'
    }
    commandLine command.tokenize()
}

/* CocoaPods */

task podLibLint(type: Exec) {
    dependsOn bundleInstall
    String command = xcodePath + 'bundle exec pod lib lint'
    if (verbose) {
        command += ' --verbose'
    }
    commandLine command.tokenize()
}

/* Swift Package Manager */

task xcodeGenerate(type: Exec) {
    description 'Generates an Xcode project'
    commandLine 'swift package generate-xcodeproj'.tokenize()
}

task spmDescribe(type: Exec) {
    commandLine 'swift package describe'.tokenize()
}

task spmDependencies(type: Exec) {
    commandLine 'swift package show-dependencies'.tokenize()
}

task swiftFetchDependencies(type: Exec) {
    String command = 'swift package resolve'
    commandLine command.tokenize()
}

task swiftBuild(type: Exec) {
    String command = 'swift build'
    if (verbose) {
        command += ' --verbose'
    }
    commandLine command.tokenize()
}

task swiftTest(type: Exec) {
    String command = 'swift test'
    if (verbose) {
        command += ' --verbose'
    }
    commandLine command.tokenize()
}

/* Top-Level Tasks for CI */

task xcode {
    description 'Builds and runs tests using xcodebuild.'
    tasks.getByName('cocoapodsInstall').dependsOn bundleInstall
    tasks.getByName('xcodebuild').dependsOn swiftFetchDependencies
    dependsOn 'build'
    dependsOn 'test'
}

task cocoapods {
    description 'Builds and lints the library as a CocoaPod.'
    dependsOn podLibLint
}

task spm {
    description 'Builds and runs tests using the Swift Package Manager.'
    dependsOn spmDescribe
    dependsOn spmDependencies
    dependsOn swiftFetchDependencies
    dependsOn swiftBuild
    dependsOn swiftTest
}

task buildAll {
    description 'Runs all types of builds.'
    dependsOn xcode
    dependsOn cocoapods
    // TEMP: SPM disabled due to issues with Quick tests
    //dependsOn spm
}
